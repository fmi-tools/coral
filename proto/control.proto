package dsbproto.control;

import "variable.proto";


// Message type identifiers.
enum MessageType
{
    MSG_DENIED      =  0;
    MSG_HELLO       =  1;
    MSG_ERROR       =  2;
    MSG_TERMINATE   =  3;
    MSG_INIT_READY  =  4;
    MSG_INIT_DONE   =  5;
    MSG_READY       =  6;
    MSG_SET_VARS    =  7;
    MSG_STEP        =  8;
    MSG_STEP_OK     =  9;
    MSG_STEP_FAILED = 10;
    MSG_RECV_VARS   = 11;
}


// The body of an ERROR message.
message ErrorInfo
{
    enum Code
    {
        UNKNOWN_ERROR   =  0;
        INVALID_REQUEST =  1;
    }

    optional Code code = 1 [default = UNKNOWN_ERROR];
    optional string details = 2;
}


// The information a slave needs to transfer to the master about one of
// its variables.
message VarInfo
{
    required int32 id = 1;
    required string name = 2;
    required variable.DataType type = 3;
    required variable.Causality causality = 4;
}


// The information a slave needs to transfer to the master about itself.
message SlaveDescription
{
    required int32 id = 1;
    required string name = 2;
    repeated VarInfo variable = 10;
}

// A message that acts as a unique identifier for a certain variable for
// a certain slave.
message Variable
{
    required int32 slave_id = 1;
    required int32 var_id = 2;
}

// A message that instructs a slave to connect one of its input variables
// to another slave's output variable.
message PortConnection
{
    required int32 input_var_id = 1;
    required Variable output_var = 2;
}

// An initial value for one of a slave's variables.
message VarInit
{
    required int32 var_id = 1;
    required variable.ScalarValue value = 2;
}

// A message that is sent by the master to a slave to initialize it.
message SlaveInitialization
{
    repeated PortConnection connection = 1;
    repeated VarInit initial_value = 2;
}

// The body of a STEP message
message StepData
{
    required double timepoint = 1;
    required double stepsize = 2;
}
