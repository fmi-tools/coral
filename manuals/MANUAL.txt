Distributed Simulation Bus 0.1.0
================================
2014-12-02



Disclaimer
--------------------------------
The DSB is still in a very early, prototyping, pre-alpha state. Hiccups and unexpected behavior are almost, well, expected at this point. However, most problems can probably be resolved by killing all instances of the DSB (dsbexec, slave_provider, broker) and restarting as needed. Processes can be terminated by pressing CTRL+C.
Please report any unexpected behavior and problems and issues to the developers Lars & Severin (and, thereafter, expect helpful feedback such as "Have you tried turning it off and on again?").



Overview
--------------------------------
The DSB package consists of three separate programs:
(*)	dsbexec.exe is the 'master' and controls a simulation,
(*)	slave_provider.exe provides 'slave types' (models, FMUs) and instantiates and adds them as 'slaves' to a simulation, and
(*) broker.exe is a central connection point.

A co-simulation system can be constructed from slave types that are made available in the so-called 'domain' via slave providers. dsbexec.exe connects to the domain and is then used to inquire about which slave types are provided and what their properties and connections are.
Simulations (executions) are set up via a system and an execution configuration file. The execution configuration file contains data about the simulation run itself, such as the start time and time step, while the system configuration file stores which slave types are part of the simulation, sets their initial values and parameters, and defines the connections between them.

NOTE:	As of yet, the configuration files are written by hand as a temporary solution.



dsbexec.exe
--------------------------------
(*)	Initializes and controls an execution.
(*)	Retrieves a list of slave types that are made available in the domain by the slave provider(s).
(*)	Retrieves detailed information on specific slave types.
(*)	Request the instantiation of slave types for a specific execution.

Call "dsbexec" to display detailed information on how to run and use dsbexec.exe.



slave_provider.exe
--------------------------------
(*)	Loads slave types, provides them in the domain, and publishes their properties.
(*)	Instantiates slave types and adds them to a specific execution as slaves.

Call "slave_provider" to display detailed information on how to run and use slave_provider.exe.

NOTE:	slave.exe is a separate program that is called automatically and runs a particular slave type for an execution.
		If slave.exe is stored in a different directory than slave_provider.exe, its path must be specified when calling slave_provider.exe.


		
broker.exe
--------------------------------
(*)	Is a central connection and routing point with a known address.

NOTE:	The broker defines the domain address which should be "tcp://" followed by the IP address or host name of the host on which the broker is running. For local simulations, use the host name "localhost".
NOTE:	As a last resort to deal with crashes or freezes one can try to restart the broker to make sure that outdated processes and communications which may be stuck are terminated.



Setting up a simulation
--------------------------------
(1)	Run broker.exe by calling "broker".
(2)	Run slave_provider.exe by calling "slave_provider <fmu...>", specifying the paths to the FMU files and/or directories.
		NOTE:		Multiple slave providers can be run using the same broker.
(3)	Run dsbexec.exe in LIST mode by calling "dsbexec list". This retrieves a list of all slave types that are made available in the domain by the slave provider(s).
(4)	Run dsbexec.exe in INFO mode to retrieve the properties and connections of the slave types that are needed for the simulation. To achieve this call "dsbexec info <slave type>", specifying a slave type as listed under (3).
(5)	Write a system configuration file with the retrieved information and define the simulation parameters (start time, end time, and step size) in an execution configuration file.

NOTE:	Simple demo configuration files and two simple demo FMUs are provided in the "demo" folder. Also see the example below.



Running a simulation
--------------------------------
(1)	Run the broker.
(2)	Run the slave provider(s), specifying the domain address and the paths to the FMU files and/or directories.
		Optional:	Specify a directory to write the output files to by using the call argument "--output-dir".
		Optional:	Specify the directory of the slave.exe program by using the call argument "--slave-exe".
(3)	Run the master in RUN mode by calling "dsbexec run <exec.config> <sys.config>", specifying the execution and system configuration files. The required slaves will be instantiated (in separate terminal windows) and added to the execution.
		Optional:	Specify a name for the execution by using the call argument "--name". Otherwise, a time stamp is used by default.
		Note:		The name of the output files are shown in the slave provider terminal(s).
(4)	In the master terminal window press 'ENTER' to start the simulation.
		Note:		A progress bar will inform about the state of the simulation.
(5) Once finished, the slaves will be shut down. Terminate the execution and shut down the master by pressing 'ENTER'.

NOTE:	It is possible to run multiple executions (with multiple masters) at the same time using the same broker and the same slave provider(s).



Example: The double spring system
--------------------------------
The DSB comes with two simple demo FMUs and a set of corresponding execution and system configuration files that can be found in the "demo" folder. These simulate a one-dimensional double spring system, and the present section shall explain how to set up and run a co-simulation with the DSB using these demo files.

(1)	Open a terminal window, navigate to the "dsb-0.1.0/bin" and call "broker".
(2)	In another terminal window, call "slave_provider ../demo" from the same directory. The FMUs in the "demo" directory are now loaded and available in the domain.
(3)	Open a third terminal window and call "dsbexec list". The master will connect to the domain and retrieve a list of all available slave types. These should now be "mass_1d" and "spring_1d".
(4)	Let us get better acquainted with spring_1d by calling "dsbexec info spring_1d". This will retrieve more detailed information on that particular FMU, such as a description, a version, and its parameters, input and outputs.
(5)	Open the execution configuration file "10sec_run.execonf" in the "demo" folder and note how it defines the start time, the stop time, and the step size for the simulation run.
(6)	Open the system configuration file "double_spring.sysconf" and note how it defines the slave types needed for the simulation, their initial values, and their connections.
(7)	Start the simulation of the double spring system by calling "dsbexec run ../demo/10sec_run.execonf ../demo/double_spring.sysconf". The configuration files will be parsed and the necessary FMUs will be loaded. Once finished, press 'ENTER' in the dsbexec terminal window to begin simulating. After completion, press 'ENTER' again to terminate dsbexec and return.
(8)	Navigate to the "bin" folder (or the folder from which dsbexec was called) and have a look at the output files *.csv (for example by using MS Excel).
NOTE:	The output file names will also be printed in the slave provider terminal window.

Optional:	Try running the DSB with its component spread over the local network. For example, start the broker and the slave provider(s) on one computer, and dsbexec on another. The domain address will then be "tcp://" followed by the IP address of the computer that is running the broker (for example, "tcp://192.168.1.56").



Index
--------------------------------
Domain			The virtual space in which masters connect to slave providers to retrieve information on available slave types and request their instantiation for a particular execution.
Domain address	The network domain address, "tcp://" followed by the IP address or host name of the host on which the broker is running. For local simulations, use the host name "localhost".
Execution		The virtual space in which a master is connected to slaves to initialize and run a simulation.
Slave type		A mathematical model or a hardware sensor etc. that can be instantiated and added to a specific execution as a slave. In FMI terminology, this is an FMU.
